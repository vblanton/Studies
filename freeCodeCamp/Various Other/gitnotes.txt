Create a local repository:
git init repositoryname

See info about repository:
git status

stage files (or everything:)
git add .
git add filename

commit:
git commit -m "Initial commit"

good commit messages tips:
Describe the change concisely. Try to keep it to no more than 50 characters. If you can't describe the commit in 50 characters, it may mean you are including too much in a commit. And if you find yourself adding an "and", that's a good indicator that you have multiple changes in one commit.
Describe what, not how. For example, instead of "Modify 5 files", use "Add copyright notice to footer".
Use sentence case with only the first letter capitalized.
Don't end with a period.
Use the imperative mood. That is to say write the message in the form of a command in the present tense.

check the commit history:
(there are extensive commands to filter and make the output pretty)
git log

switch to a branch (like main):
git checkout main

make a branch from current branch: 

git branch branch_name
(then switch to the branch using 'git checkout branch_name)

create and switch to a new branch:
git checkout -b style_change

view list of all branches:
git branch

stage and commit only modified files (not new ones):
git commit -a -m "Restyle recipe ingredients"

merge changes into main branch (from main branch)
git merge branch_name

delete a branch (you can't do it from within the branch, switch to main)
git branch -d branch_name

merge main back into branches to keep them up to date from within the branch:
git merge main